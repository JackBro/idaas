/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Database_H
#define Database_H

#include <thrift/TDispatchProcessor.h>
#include "idaas_types.h"

namespace idaas {

class DatabaseIf {
 public:
  virtual ~DatabaseIf() {}
  virtual void listEnums(std::vector<ida_enum> & _return) = 0;
  virtual bool storeEnum(const ida_enum& _enum) = 0;
  virtual bool storeEnums(const std::vector<ida_enum> & enums) = 0;
  virtual void deleteEnum(const std::string& name) = 0;
  virtual void listStructures(std::vector<ida_struct> & _return) = 0;
  virtual bool storeStructure(const ida_struct& _struct) = 0;
  virtual bool storeStructures(const std::vector<ida_struct> & structs) = 0;
  virtual void deleteStruct(const std::string& name) = 0;
  virtual void waitBackgroundTasks() = 0;
};

class DatabaseIfFactory {
 public:
  typedef DatabaseIf Handler;

  virtual ~DatabaseIfFactory() {}

  virtual DatabaseIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DatabaseIf* /* handler */) = 0;
};

class DatabaseIfSingletonFactory : virtual public DatabaseIfFactory {
 public:
  DatabaseIfSingletonFactory(const boost::shared_ptr<DatabaseIf>& iface) : iface_(iface) {}
  virtual ~DatabaseIfSingletonFactory() {}

  virtual DatabaseIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DatabaseIf* /* handler */) {}

 protected:
  boost::shared_ptr<DatabaseIf> iface_;
};

class DatabaseNull : virtual public DatabaseIf {
 public:
  virtual ~DatabaseNull() {}
  void listEnums(std::vector<ida_enum> & /* _return */) {
    return;
  }
  bool storeEnum(const ida_enum& /* _enum */) {
    bool _return = false;
    return _return;
  }
  bool storeEnums(const std::vector<ida_enum> & /* enums */) {
    bool _return = false;
    return _return;
  }
  void deleteEnum(const std::string& /* name */) {
    return;
  }
  void listStructures(std::vector<ida_struct> & /* _return */) {
    return;
  }
  bool storeStructure(const ida_struct& /* _struct */) {
    bool _return = false;
    return _return;
  }
  bool storeStructures(const std::vector<ida_struct> & /* structs */) {
    bool _return = false;
    return _return;
  }
  void deleteStruct(const std::string& /* name */) {
    return;
  }
  void waitBackgroundTasks() {
    return;
  }
};


class Database_listEnums_args {
 public:

  Database_listEnums_args() {
  }

  virtual ~Database_listEnums_args() throw() {}


  bool operator == (const Database_listEnums_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Database_listEnums_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_listEnums_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_listEnums_pargs {
 public:


  virtual ~Database_listEnums_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_listEnums_result__isset {
  _Database_listEnums_result__isset() : success(false) {}
  bool success;
} _Database_listEnums_result__isset;

class Database_listEnums_result {
 public:

  Database_listEnums_result() {
  }

  virtual ~Database_listEnums_result() throw() {}

  std::vector<ida_enum>  success;

  _Database_listEnums_result__isset __isset;

  void __set_success(const std::vector<ida_enum> & val) {
    success = val;
  }

  bool operator == (const Database_listEnums_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_listEnums_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_listEnums_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_listEnums_presult__isset {
  _Database_listEnums_presult__isset() : success(false) {}
  bool success;
} _Database_listEnums_presult__isset;

class Database_listEnums_presult {
 public:


  virtual ~Database_listEnums_presult() throw() {}

  std::vector<ida_enum> * success;

  _Database_listEnums_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_storeEnum_args__isset {
  _Database_storeEnum_args__isset() : _enum(false) {}
  bool _enum;
} _Database_storeEnum_args__isset;

class Database_storeEnum_args {
 public:

  Database_storeEnum_args() {
  }

  virtual ~Database_storeEnum_args() throw() {}

  ida_enum _enum;

  _Database_storeEnum_args__isset __isset;

  void __set__enum(const ida_enum& val) {
    _enum = val;
  }

  bool operator == (const Database_storeEnum_args & rhs) const
  {
    if (!(_enum == rhs._enum))
      return false;
    return true;
  }
  bool operator != (const Database_storeEnum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_storeEnum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_storeEnum_pargs {
 public:


  virtual ~Database_storeEnum_pargs() throw() {}

  const ida_enum* _enum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_storeEnum_result__isset {
  _Database_storeEnum_result__isset() : success(false) {}
  bool success;
} _Database_storeEnum_result__isset;

class Database_storeEnum_result {
 public:

  Database_storeEnum_result() : success(0) {
  }

  virtual ~Database_storeEnum_result() throw() {}

  bool success;

  _Database_storeEnum_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Database_storeEnum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_storeEnum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_storeEnum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_storeEnum_presult__isset {
  _Database_storeEnum_presult__isset() : success(false) {}
  bool success;
} _Database_storeEnum_presult__isset;

class Database_storeEnum_presult {
 public:


  virtual ~Database_storeEnum_presult() throw() {}

  bool* success;

  _Database_storeEnum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_storeEnums_args__isset {
  _Database_storeEnums_args__isset() : enums(false) {}
  bool enums;
} _Database_storeEnums_args__isset;

class Database_storeEnums_args {
 public:

  Database_storeEnums_args() {
  }

  virtual ~Database_storeEnums_args() throw() {}

  std::vector<ida_enum>  enums;

  _Database_storeEnums_args__isset __isset;

  void __set_enums(const std::vector<ida_enum> & val) {
    enums = val;
  }

  bool operator == (const Database_storeEnums_args & rhs) const
  {
    if (!(enums == rhs.enums))
      return false;
    return true;
  }
  bool operator != (const Database_storeEnums_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_storeEnums_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_storeEnums_pargs {
 public:


  virtual ~Database_storeEnums_pargs() throw() {}

  const std::vector<ida_enum> * enums;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_storeEnums_result__isset {
  _Database_storeEnums_result__isset() : success(false) {}
  bool success;
} _Database_storeEnums_result__isset;

class Database_storeEnums_result {
 public:

  Database_storeEnums_result() : success(0) {
  }

  virtual ~Database_storeEnums_result() throw() {}

  bool success;

  _Database_storeEnums_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Database_storeEnums_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_storeEnums_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_storeEnums_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_storeEnums_presult__isset {
  _Database_storeEnums_presult__isset() : success(false) {}
  bool success;
} _Database_storeEnums_presult__isset;

class Database_storeEnums_presult {
 public:


  virtual ~Database_storeEnums_presult() throw() {}

  bool* success;

  _Database_storeEnums_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_deleteEnum_args__isset {
  _Database_deleteEnum_args__isset() : name(false) {}
  bool name;
} _Database_deleteEnum_args__isset;

class Database_deleteEnum_args {
 public:

  Database_deleteEnum_args() : name() {
  }

  virtual ~Database_deleteEnum_args() throw() {}

  std::string name;

  _Database_deleteEnum_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Database_deleteEnum_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Database_deleteEnum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_deleteEnum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_deleteEnum_pargs {
 public:


  virtual ~Database_deleteEnum_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_deleteEnum_result {
 public:

  Database_deleteEnum_result() {
  }

  virtual ~Database_deleteEnum_result() throw() {}


  bool operator == (const Database_deleteEnum_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Database_deleteEnum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_deleteEnum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_deleteEnum_presult {
 public:


  virtual ~Database_deleteEnum_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Database_listStructures_args {
 public:

  Database_listStructures_args() {
  }

  virtual ~Database_listStructures_args() throw() {}


  bool operator == (const Database_listStructures_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Database_listStructures_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_listStructures_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_listStructures_pargs {
 public:


  virtual ~Database_listStructures_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_listStructures_result__isset {
  _Database_listStructures_result__isset() : success(false) {}
  bool success;
} _Database_listStructures_result__isset;

class Database_listStructures_result {
 public:

  Database_listStructures_result() {
  }

  virtual ~Database_listStructures_result() throw() {}

  std::vector<ida_struct>  success;

  _Database_listStructures_result__isset __isset;

  void __set_success(const std::vector<ida_struct> & val) {
    success = val;
  }

  bool operator == (const Database_listStructures_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_listStructures_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_listStructures_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_listStructures_presult__isset {
  _Database_listStructures_presult__isset() : success(false) {}
  bool success;
} _Database_listStructures_presult__isset;

class Database_listStructures_presult {
 public:


  virtual ~Database_listStructures_presult() throw() {}

  std::vector<ida_struct> * success;

  _Database_listStructures_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_storeStructure_args__isset {
  _Database_storeStructure_args__isset() : _struct(false) {}
  bool _struct;
} _Database_storeStructure_args__isset;

class Database_storeStructure_args {
 public:

  Database_storeStructure_args() {
  }

  virtual ~Database_storeStructure_args() throw() {}

  ida_struct _struct;

  _Database_storeStructure_args__isset __isset;

  void __set__struct(const ida_struct& val) {
    _struct = val;
  }

  bool operator == (const Database_storeStructure_args & rhs) const
  {
    if (!(_struct == rhs._struct))
      return false;
    return true;
  }
  bool operator != (const Database_storeStructure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_storeStructure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_storeStructure_pargs {
 public:


  virtual ~Database_storeStructure_pargs() throw() {}

  const ida_struct* _struct;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_storeStructure_result__isset {
  _Database_storeStructure_result__isset() : success(false) {}
  bool success;
} _Database_storeStructure_result__isset;

class Database_storeStructure_result {
 public:

  Database_storeStructure_result() : success(0) {
  }

  virtual ~Database_storeStructure_result() throw() {}

  bool success;

  _Database_storeStructure_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Database_storeStructure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_storeStructure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_storeStructure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_storeStructure_presult__isset {
  _Database_storeStructure_presult__isset() : success(false) {}
  bool success;
} _Database_storeStructure_presult__isset;

class Database_storeStructure_presult {
 public:


  virtual ~Database_storeStructure_presult() throw() {}

  bool* success;

  _Database_storeStructure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_storeStructures_args__isset {
  _Database_storeStructures_args__isset() : structs(false) {}
  bool structs;
} _Database_storeStructures_args__isset;

class Database_storeStructures_args {
 public:

  Database_storeStructures_args() {
  }

  virtual ~Database_storeStructures_args() throw() {}

  std::vector<ida_struct>  structs;

  _Database_storeStructures_args__isset __isset;

  void __set_structs(const std::vector<ida_struct> & val) {
    structs = val;
  }

  bool operator == (const Database_storeStructures_args & rhs) const
  {
    if (!(structs == rhs.structs))
      return false;
    return true;
  }
  bool operator != (const Database_storeStructures_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_storeStructures_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_storeStructures_pargs {
 public:


  virtual ~Database_storeStructures_pargs() throw() {}

  const std::vector<ida_struct> * structs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_storeStructures_result__isset {
  _Database_storeStructures_result__isset() : success(false) {}
  bool success;
} _Database_storeStructures_result__isset;

class Database_storeStructures_result {
 public:

  Database_storeStructures_result() : success(0) {
  }

  virtual ~Database_storeStructures_result() throw() {}

  bool success;

  _Database_storeStructures_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Database_storeStructures_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_storeStructures_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_storeStructures_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_storeStructures_presult__isset {
  _Database_storeStructures_presult__isset() : success(false) {}
  bool success;
} _Database_storeStructures_presult__isset;

class Database_storeStructures_presult {
 public:


  virtual ~Database_storeStructures_presult() throw() {}

  bool* success;

  _Database_storeStructures_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_deleteStruct_args__isset {
  _Database_deleteStruct_args__isset() : name(false) {}
  bool name;
} _Database_deleteStruct_args__isset;

class Database_deleteStruct_args {
 public:

  Database_deleteStruct_args() : name() {
  }

  virtual ~Database_deleteStruct_args() throw() {}

  std::string name;

  _Database_deleteStruct_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Database_deleteStruct_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Database_deleteStruct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_deleteStruct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_deleteStruct_pargs {
 public:


  virtual ~Database_deleteStruct_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_deleteStruct_result {
 public:

  Database_deleteStruct_result() {
  }

  virtual ~Database_deleteStruct_result() throw() {}


  bool operator == (const Database_deleteStruct_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Database_deleteStruct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_deleteStruct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_deleteStruct_presult {
 public:


  virtual ~Database_deleteStruct_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Database_waitBackgroundTasks_args {
 public:

  Database_waitBackgroundTasks_args() {
  }

  virtual ~Database_waitBackgroundTasks_args() throw() {}


  bool operator == (const Database_waitBackgroundTasks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Database_waitBackgroundTasks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_waitBackgroundTasks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_waitBackgroundTasks_pargs {
 public:


  virtual ~Database_waitBackgroundTasks_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_waitBackgroundTasks_result {
 public:

  Database_waitBackgroundTasks_result() {
  }

  virtual ~Database_waitBackgroundTasks_result() throw() {}


  bool operator == (const Database_waitBackgroundTasks_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Database_waitBackgroundTasks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_waitBackgroundTasks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_waitBackgroundTasks_presult {
 public:


  virtual ~Database_waitBackgroundTasks_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DatabaseClient : virtual public DatabaseIf {
 public:
  DatabaseClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DatabaseClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void listEnums(std::vector<ida_enum> & _return);
  void send_listEnums();
  void recv_listEnums(std::vector<ida_enum> & _return);
  bool storeEnum(const ida_enum& _enum);
  void send_storeEnum(const ida_enum& _enum);
  bool recv_storeEnum();
  bool storeEnums(const std::vector<ida_enum> & enums);
  void send_storeEnums(const std::vector<ida_enum> & enums);
  bool recv_storeEnums();
  void deleteEnum(const std::string& name);
  void send_deleteEnum(const std::string& name);
  void recv_deleteEnum();
  void listStructures(std::vector<ida_struct> & _return);
  void send_listStructures();
  void recv_listStructures(std::vector<ida_struct> & _return);
  bool storeStructure(const ida_struct& _struct);
  void send_storeStructure(const ida_struct& _struct);
  bool recv_storeStructure();
  bool storeStructures(const std::vector<ida_struct> & structs);
  void send_storeStructures(const std::vector<ida_struct> & structs);
  bool recv_storeStructures();
  void deleteStruct(const std::string& name);
  void send_deleteStruct(const std::string& name);
  void recv_deleteStruct();
  void waitBackgroundTasks();
  void send_waitBackgroundTasks();
  void recv_waitBackgroundTasks();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DatabaseProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DatabaseIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DatabaseProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_listEnums(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storeEnum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storeEnums(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteEnum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listStructures(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storeStructure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storeStructures(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteStruct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_waitBackgroundTasks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DatabaseProcessor(boost::shared_ptr<DatabaseIf> iface) :
    iface_(iface) {
    processMap_["listEnums"] = &DatabaseProcessor::process_listEnums;
    processMap_["storeEnum"] = &DatabaseProcessor::process_storeEnum;
    processMap_["storeEnums"] = &DatabaseProcessor::process_storeEnums;
    processMap_["deleteEnum"] = &DatabaseProcessor::process_deleteEnum;
    processMap_["listStructures"] = &DatabaseProcessor::process_listStructures;
    processMap_["storeStructure"] = &DatabaseProcessor::process_storeStructure;
    processMap_["storeStructures"] = &DatabaseProcessor::process_storeStructures;
    processMap_["deleteStruct"] = &DatabaseProcessor::process_deleteStruct;
    processMap_["waitBackgroundTasks"] = &DatabaseProcessor::process_waitBackgroundTasks;
  }

  virtual ~DatabaseProcessor() {}
};

class DatabaseProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DatabaseProcessorFactory(const ::boost::shared_ptr< DatabaseIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DatabaseIfFactory > handlerFactory_;
};

class DatabaseMultiface : virtual public DatabaseIf {
 public:
  DatabaseMultiface(std::vector<boost::shared_ptr<DatabaseIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DatabaseMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DatabaseIf> > ifaces_;
  DatabaseMultiface() {}
  void add(boost::shared_ptr<DatabaseIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void listEnums(std::vector<ida_enum> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listEnums(_return);
    }
    ifaces_[i]->listEnums(_return);
    return;
  }

  bool storeEnum(const ida_enum& _enum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeEnum(_enum);
    }
    return ifaces_[i]->storeEnum(_enum);
  }

  bool storeEnums(const std::vector<ida_enum> & enums) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeEnums(enums);
    }
    return ifaces_[i]->storeEnums(enums);
  }

  void deleteEnum(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteEnum(name);
    }
    ifaces_[i]->deleteEnum(name);
  }

  void listStructures(std::vector<ida_struct> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listStructures(_return);
    }
    ifaces_[i]->listStructures(_return);
    return;
  }

  bool storeStructure(const ida_struct& _struct) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeStructure(_struct);
    }
    return ifaces_[i]->storeStructure(_struct);
  }

  bool storeStructures(const std::vector<ida_struct> & structs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeStructures(structs);
    }
    return ifaces_[i]->storeStructures(structs);
  }

  void deleteStruct(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteStruct(name);
    }
    ifaces_[i]->deleteStruct(name);
  }

  void waitBackgroundTasks() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->waitBackgroundTasks();
    }
    ifaces_[i]->waitBackgroundTasks();
  }

};

} // namespace

#endif

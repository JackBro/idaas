/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Idaas
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ida_struct : TBase
  {
    private string _name;
    private bool _isUnion;
    private List<ida_struct_member> _members;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public bool IsUnion
    {
      get
      {
        return _isUnion;
      }
      set
      {
        __isset.isUnion = true;
        this._isUnion = value;
      }
    }

    public List<ida_struct_member> Members
    {
      get
      {
        return _members;
      }
      set
      {
        __isset.members = true;
        this._members = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool isUnion;
      public bool members;
    }

    public ida_struct() {
      this._isUnion = false;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              IsUnion = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Members = new List<ida_struct_member>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  ida_struct_member _elem6 = new ida_struct_member();
                  _elem6 = new ida_struct_member();
                  _elem6.Read(iprot);
                  Members.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ida_struct");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.isUnion) {
        field.Name = "isUnion";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsUnion);
        oprot.WriteFieldEnd();
      }
      if (Members != null && __isset.members) {
        field.Name = "members";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Members.Count));
          foreach (ida_struct_member _iter7 in Members)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ida_struct(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",IsUnion: ");
      sb.Append(IsUnion);
      sb.Append(",Members: ");
      sb.Append(Members);
      sb.Append(")");
      return sb.ToString();
    }

  }

}

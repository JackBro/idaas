/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Idaas
{
  public partial class Database {
    public interface Iface {
      List<ida_enum> listEnums();
      #if SILVERLIGHT
      IAsyncResult Begin_listEnums(AsyncCallback callback, object state, );
      List<ida_enum> End_listEnums(IAsyncResult asyncResult);
      #endif
      bool storeEnum(ida_enum _enum);
      #if SILVERLIGHT
      IAsyncResult Begin_storeEnum(AsyncCallback callback, object state, ida_enum _enum);
      bool End_storeEnum(IAsyncResult asyncResult);
      #endif
      bool storeEnums(List<ida_enum> enums);
      #if SILVERLIGHT
      IAsyncResult Begin_storeEnums(AsyncCallback callback, object state, List<ida_enum> enums);
      bool End_storeEnums(IAsyncResult asyncResult);
      #endif
      void deleteEnum(string name);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteEnum(AsyncCallback callback, object state, string name);
      void End_deleteEnum(IAsyncResult asyncResult);
      #endif
      List<IdaStruct> listStructures();
      #if SILVERLIGHT
      IAsyncResult Begin_listStructures(AsyncCallback callback, object state, );
      List<IdaStruct> End_listStructures(IAsyncResult asyncResult);
      #endif
      bool storeStructure(IdaStruct _struct);
      #if SILVERLIGHT
      IAsyncResult Begin_storeStructure(AsyncCallback callback, object state, IdaStruct _struct);
      bool End_storeStructure(IAsyncResult asyncResult);
      #endif
      bool storeStructures(List<IdaStruct> structs);
      #if SILVERLIGHT
      IAsyncResult Begin_storeStructures(AsyncCallback callback, object state, List<IdaStruct> structs);
      bool End_storeStructures(IAsyncResult asyncResult);
      #endif
      void deleteStruct(string name);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteStruct(AsyncCallback callback, object state, string name);
      void End_deleteStruct(IAsyncResult asyncResult);
      #endif
      List<ida_string> listStrings();
      #if SILVERLIGHT
      IAsyncResult Begin_listStrings(AsyncCallback callback, object state, );
      List<ida_string> End_listStrings(IAsyncResult asyncResult);
      #endif
      List<IdaRef> xrefsTo(int address, IdaRefType refType);
      #if SILVERLIGHT
      IAsyncResult Begin_xrefsTo(AsyncCallback callback, object state, int address, IdaRefType refType);
      List<IdaRef> End_xrefsTo(IAsyncResult asyncResult);
      #endif
      List<IdaRef> xrefsFrom(int address, IdaRefType refType);
      #if SILVERLIGHT
      IAsyncResult Begin_xrefsFrom(AsyncCallback callback, object state, int address, IdaRefType refType);
      List<IdaRef> End_xrefsFrom(IAsyncResult asyncResult);
      #endif
      IdaInstruction fetchInstruction(int address);
      #if SILVERLIGHT
      IAsyncResult Begin_fetchInstruction(AsyncCallback callback, object state, int address);
      IdaInstruction End_fetchInstruction(IAsyncResult asyncResult);
      #endif
      List<IdaFunction> listFunctions();
      #if SILVERLIGHT
      IAsyncResult Begin_listFunctions(AsyncCallback callback, object state, );
      List<IdaFunction> End_listFunctions(IAsyncResult asyncResult);
      #endif
      IdaFunctionFrame getFunctionFrame(int address);
      #if SILVERLIGHT
      IAsyncResult Begin_getFunctionFrame(AsyncCallback callback, object state, int address);
      IdaFunctionFrame End_getFunctionFrame(IAsyncResult asyncResult);
      #endif
      IdaTypeInfo parseTypeDeclaration(string typeDeclaration);
      #if SILVERLIGHT
      IAsyncResult Begin_parseTypeDeclaration(AsyncCallback callback, object state, string typeDeclaration);
      IdaTypeInfo End_parseTypeDeclaration(IAsyncResult asyncResult);
      #endif
      string formatTypeInfo(IdaTypeInfo typeInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_formatTypeInfo(AsyncCallback callback, object state, IdaTypeInfo typeInfo);
      string End_formatTypeInfo(IAsyncResult asyncResult);
      #endif
      List<IdaNamedAddress> listNamedAddresses();
      #if SILVERLIGHT
      IAsyncResult Begin_listNamedAddresses(AsyncCallback callback, object state, );
      List<IdaNamedAddress> End_listNamedAddresses(IAsyncResult asyncResult);
      #endif
      void waitBackgroundTasks();
      #if SILVERLIGHT
      IAsyncResult Begin_waitBackgroundTasks(AsyncCallback callback, object state, );
      void End_waitBackgroundTasks(IAsyncResult asyncResult);
      #endif
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_listEnums(AsyncCallback callback, object state, )
      {
        return send_listEnums(callback, state);
      }

      public List<ida_enum> End_listEnums(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listEnums();
      }

      #endif

      public List<ida_enum> listEnums()
      {
        #if !SILVERLIGHT
        send_listEnums();
        return recv_listEnums();

        #else
        var asyncResult = Begin_listEnums(null, null, );
        return End_listEnums(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listEnums(AsyncCallback callback, object state, )
      #else
      public void send_listEnums()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listEnums", TMessageType.Call, seqid_));
        listEnums_args args = new listEnums_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ida_enum> recv_listEnums()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listEnums_result result = new listEnums_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listEnums failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_storeEnum(AsyncCallback callback, object state, ida_enum _enum)
      {
        return send_storeEnum(callback, state, _enum);
      }

      public bool End_storeEnum(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_storeEnum();
      }

      #endif

      public bool storeEnum(ida_enum _enum)
      {
        #if !SILVERLIGHT
        send_storeEnum(_enum);
        return recv_storeEnum();

        #else
        var asyncResult = Begin_storeEnum(null, null, _enum);
        return End_storeEnum(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_storeEnum(AsyncCallback callback, object state, ida_enum _enum)
      #else
      public void send_storeEnum(ida_enum _enum)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("storeEnum", TMessageType.Call, seqid_));
        storeEnum_args args = new storeEnum_args();
        args._enum = _enum;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_storeEnum()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        storeEnum_result result = new storeEnum_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "storeEnum failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_storeEnums(AsyncCallback callback, object state, List<ida_enum> enums)
      {
        return send_storeEnums(callback, state, enums);
      }

      public bool End_storeEnums(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_storeEnums();
      }

      #endif

      public bool storeEnums(List<ida_enum> enums)
      {
        #if !SILVERLIGHT
        send_storeEnums(enums);
        return recv_storeEnums();

        #else
        var asyncResult = Begin_storeEnums(null, null, enums);
        return End_storeEnums(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_storeEnums(AsyncCallback callback, object state, List<ida_enum> enums)
      #else
      public void send_storeEnums(List<ida_enum> enums)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("storeEnums", TMessageType.Call, seqid_));
        storeEnums_args args = new storeEnums_args();
        args.Enums = enums;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_storeEnums()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        storeEnums_result result = new storeEnums_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "storeEnums failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteEnum(AsyncCallback callback, object state, string name)
      {
        return send_deleteEnum(callback, state, name);
      }

      public void End_deleteEnum(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteEnum();
      }

      #endif

      public void deleteEnum(string name)
      {
        #if !SILVERLIGHT
        send_deleteEnum(name);
        recv_deleteEnum();

        #else
        var asyncResult = Begin_deleteEnum(null, null, name);
        End_deleteEnum(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteEnum(AsyncCallback callback, object state, string name)
      #else
      public void send_deleteEnum(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteEnum", TMessageType.Call, seqid_));
        deleteEnum_args args = new deleteEnum_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteEnum()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteEnum_result result = new deleteEnum_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listStructures(AsyncCallback callback, object state, )
      {
        return send_listStructures(callback, state);
      }

      public List<IdaStruct> End_listStructures(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listStructures();
      }

      #endif

      public List<IdaStruct> listStructures()
      {
        #if !SILVERLIGHT
        send_listStructures();
        return recv_listStructures();

        #else
        var asyncResult = Begin_listStructures(null, null, );
        return End_listStructures(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listStructures(AsyncCallback callback, object state, )
      #else
      public void send_listStructures()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listStructures", TMessageType.Call, seqid_));
        listStructures_args args = new listStructures_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<IdaStruct> recv_listStructures()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listStructures_result result = new listStructures_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listStructures failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_storeStructure(AsyncCallback callback, object state, IdaStruct _struct)
      {
        return send_storeStructure(callback, state, _struct);
      }

      public bool End_storeStructure(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_storeStructure();
      }

      #endif

      public bool storeStructure(IdaStruct _struct)
      {
        #if !SILVERLIGHT
        send_storeStructure(_struct);
        return recv_storeStructure();

        #else
        var asyncResult = Begin_storeStructure(null, null, _struct);
        return End_storeStructure(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_storeStructure(AsyncCallback callback, object state, IdaStruct _struct)
      #else
      public void send_storeStructure(IdaStruct _struct)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("storeStructure", TMessageType.Call, seqid_));
        storeStructure_args args = new storeStructure_args();
        args._struct = _struct;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_storeStructure()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        storeStructure_result result = new storeStructure_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "storeStructure failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_storeStructures(AsyncCallback callback, object state, List<IdaStruct> structs)
      {
        return send_storeStructures(callback, state, structs);
      }

      public bool End_storeStructures(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_storeStructures();
      }

      #endif

      public bool storeStructures(List<IdaStruct> structs)
      {
        #if !SILVERLIGHT
        send_storeStructures(structs);
        return recv_storeStructures();

        #else
        var asyncResult = Begin_storeStructures(null, null, structs);
        return End_storeStructures(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_storeStructures(AsyncCallback callback, object state, List<IdaStruct> structs)
      #else
      public void send_storeStructures(List<IdaStruct> structs)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("storeStructures", TMessageType.Call, seqid_));
        storeStructures_args args = new storeStructures_args();
        args.Structs = structs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_storeStructures()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        storeStructures_result result = new storeStructures_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "storeStructures failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteStruct(AsyncCallback callback, object state, string name)
      {
        return send_deleteStruct(callback, state, name);
      }

      public void End_deleteStruct(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteStruct();
      }

      #endif

      public void deleteStruct(string name)
      {
        #if !SILVERLIGHT
        send_deleteStruct(name);
        recv_deleteStruct();

        #else
        var asyncResult = Begin_deleteStruct(null, null, name);
        End_deleteStruct(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteStruct(AsyncCallback callback, object state, string name)
      #else
      public void send_deleteStruct(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteStruct", TMessageType.Call, seqid_));
        deleteStruct_args args = new deleteStruct_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteStruct()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteStruct_result result = new deleteStruct_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listStrings(AsyncCallback callback, object state, )
      {
        return send_listStrings(callback, state);
      }

      public List<ida_string> End_listStrings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listStrings();
      }

      #endif

      public List<ida_string> listStrings()
      {
        #if !SILVERLIGHT
        send_listStrings();
        return recv_listStrings();

        #else
        var asyncResult = Begin_listStrings(null, null, );
        return End_listStrings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listStrings(AsyncCallback callback, object state, )
      #else
      public void send_listStrings()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listStrings", TMessageType.Call, seqid_));
        listStrings_args args = new listStrings_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ida_string> recv_listStrings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listStrings_result result = new listStrings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listStrings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_xrefsTo(AsyncCallback callback, object state, int address, IdaRefType refType)
      {
        return send_xrefsTo(callback, state, address, refType);
      }

      public List<IdaRef> End_xrefsTo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_xrefsTo();
      }

      #endif

      public List<IdaRef> xrefsTo(int address, IdaRefType refType)
      {
        #if !SILVERLIGHT
        send_xrefsTo(address, refType);
        return recv_xrefsTo();

        #else
        var asyncResult = Begin_xrefsTo(null, null, address, refType);
        return End_xrefsTo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_xrefsTo(AsyncCallback callback, object state, int address, IdaRefType refType)
      #else
      public void send_xrefsTo(int address, IdaRefType refType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("xrefsTo", TMessageType.Call, seqid_));
        xrefsTo_args args = new xrefsTo_args();
        args.Address = address;
        args.RefType = refType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<IdaRef> recv_xrefsTo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        xrefsTo_result result = new xrefsTo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "xrefsTo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_xrefsFrom(AsyncCallback callback, object state, int address, IdaRefType refType)
      {
        return send_xrefsFrom(callback, state, address, refType);
      }

      public List<IdaRef> End_xrefsFrom(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_xrefsFrom();
      }

      #endif

      public List<IdaRef> xrefsFrom(int address, IdaRefType refType)
      {
        #if !SILVERLIGHT
        send_xrefsFrom(address, refType);
        return recv_xrefsFrom();

        #else
        var asyncResult = Begin_xrefsFrom(null, null, address, refType);
        return End_xrefsFrom(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_xrefsFrom(AsyncCallback callback, object state, int address, IdaRefType refType)
      #else
      public void send_xrefsFrom(int address, IdaRefType refType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("xrefsFrom", TMessageType.Call, seqid_));
        xrefsFrom_args args = new xrefsFrom_args();
        args.Address = address;
        args.RefType = refType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<IdaRef> recv_xrefsFrom()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        xrefsFrom_result result = new xrefsFrom_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "xrefsFrom failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_fetchInstruction(AsyncCallback callback, object state, int address)
      {
        return send_fetchInstruction(callback, state, address);
      }

      public IdaInstruction End_fetchInstruction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetchInstruction();
      }

      #endif

      public IdaInstruction fetchInstruction(int address)
      {
        #if !SILVERLIGHT
        send_fetchInstruction(address);
        return recv_fetchInstruction();

        #else
        var asyncResult = Begin_fetchInstruction(null, null, address);
        return End_fetchInstruction(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_fetchInstruction(AsyncCallback callback, object state, int address)
      #else
      public void send_fetchInstruction(int address)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("fetchInstruction", TMessageType.Call, seqid_));
        fetchInstruction_args args = new fetchInstruction_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public IdaInstruction recv_fetchInstruction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        fetchInstruction_result result = new fetchInstruction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchInstruction failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listFunctions(AsyncCallback callback, object state, )
      {
        return send_listFunctions(callback, state);
      }

      public List<IdaFunction> End_listFunctions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listFunctions();
      }

      #endif

      public List<IdaFunction> listFunctions()
      {
        #if !SILVERLIGHT
        send_listFunctions();
        return recv_listFunctions();

        #else
        var asyncResult = Begin_listFunctions(null, null, );
        return End_listFunctions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listFunctions(AsyncCallback callback, object state, )
      #else
      public void send_listFunctions()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listFunctions", TMessageType.Call, seqid_));
        listFunctions_args args = new listFunctions_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<IdaFunction> recv_listFunctions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listFunctions_result result = new listFunctions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listFunctions failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFunctionFrame(AsyncCallback callback, object state, int address)
      {
        return send_getFunctionFrame(callback, state, address);
      }

      public IdaFunctionFrame End_getFunctionFrame(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFunctionFrame();
      }

      #endif

      public IdaFunctionFrame getFunctionFrame(int address)
      {
        #if !SILVERLIGHT
        send_getFunctionFrame(address);
        return recv_getFunctionFrame();

        #else
        var asyncResult = Begin_getFunctionFrame(null, null, address);
        return End_getFunctionFrame(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFunctionFrame(AsyncCallback callback, object state, int address)
      #else
      public void send_getFunctionFrame(int address)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFunctionFrame", TMessageType.Call, seqid_));
        getFunctionFrame_args args = new getFunctionFrame_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public IdaFunctionFrame recv_getFunctionFrame()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFunctionFrame_result result = new getFunctionFrame_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFunctionFrame failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_parseTypeDeclaration(AsyncCallback callback, object state, string typeDeclaration)
      {
        return send_parseTypeDeclaration(callback, state, typeDeclaration);
      }

      public IdaTypeInfo End_parseTypeDeclaration(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_parseTypeDeclaration();
      }

      #endif

      public IdaTypeInfo parseTypeDeclaration(string typeDeclaration)
      {
        #if !SILVERLIGHT
        send_parseTypeDeclaration(typeDeclaration);
        return recv_parseTypeDeclaration();

        #else
        var asyncResult = Begin_parseTypeDeclaration(null, null, typeDeclaration);
        return End_parseTypeDeclaration(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_parseTypeDeclaration(AsyncCallback callback, object state, string typeDeclaration)
      #else
      public void send_parseTypeDeclaration(string typeDeclaration)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("parseTypeDeclaration", TMessageType.Call, seqid_));
        parseTypeDeclaration_args args = new parseTypeDeclaration_args();
        args.TypeDeclaration = typeDeclaration;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public IdaTypeInfo recv_parseTypeDeclaration()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        parseTypeDeclaration_result result = new parseTypeDeclaration_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "parseTypeDeclaration failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_formatTypeInfo(AsyncCallback callback, object state, IdaTypeInfo typeInfo)
      {
        return send_formatTypeInfo(callback, state, typeInfo);
      }

      public string End_formatTypeInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_formatTypeInfo();
      }

      #endif

      public string formatTypeInfo(IdaTypeInfo typeInfo)
      {
        #if !SILVERLIGHT
        send_formatTypeInfo(typeInfo);
        return recv_formatTypeInfo();

        #else
        var asyncResult = Begin_formatTypeInfo(null, null, typeInfo);
        return End_formatTypeInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_formatTypeInfo(AsyncCallback callback, object state, IdaTypeInfo typeInfo)
      #else
      public void send_formatTypeInfo(IdaTypeInfo typeInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("formatTypeInfo", TMessageType.Call, seqid_));
        formatTypeInfo_args args = new formatTypeInfo_args();
        args.TypeInfo = typeInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_formatTypeInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        formatTypeInfo_result result = new formatTypeInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "formatTypeInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listNamedAddresses(AsyncCallback callback, object state, )
      {
        return send_listNamedAddresses(callback, state);
      }

      public List<IdaNamedAddress> End_listNamedAddresses(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listNamedAddresses();
      }

      #endif

      public List<IdaNamedAddress> listNamedAddresses()
      {
        #if !SILVERLIGHT
        send_listNamedAddresses();
        return recv_listNamedAddresses();

        #else
        var asyncResult = Begin_listNamedAddresses(null, null, );
        return End_listNamedAddresses(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listNamedAddresses(AsyncCallback callback, object state, )
      #else
      public void send_listNamedAddresses()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listNamedAddresses", TMessageType.Call, seqid_));
        listNamedAddresses_args args = new listNamedAddresses_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<IdaNamedAddress> recv_listNamedAddresses()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listNamedAddresses_result result = new listNamedAddresses_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listNamedAddresses failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_waitBackgroundTasks(AsyncCallback callback, object state, )
      {
        return send_waitBackgroundTasks(callback, state);
      }

      public void End_waitBackgroundTasks(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_waitBackgroundTasks();
      }

      #endif

      public void waitBackgroundTasks()
      {
        #if !SILVERLIGHT
        send_waitBackgroundTasks();
        recv_waitBackgroundTasks();

        #else
        var asyncResult = Begin_waitBackgroundTasks(null, null, );
        End_waitBackgroundTasks(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_waitBackgroundTasks(AsyncCallback callback, object state, )
      #else
      public void send_waitBackgroundTasks()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("waitBackgroundTasks", TMessageType.Call, seqid_));
        waitBackgroundTasks_args args = new waitBackgroundTasks_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_waitBackgroundTasks()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        waitBackgroundTasks_result result = new waitBackgroundTasks_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["listEnums"] = listEnums_Process;
        processMap_["storeEnum"] = storeEnum_Process;
        processMap_["storeEnums"] = storeEnums_Process;
        processMap_["deleteEnum"] = deleteEnum_Process;
        processMap_["listStructures"] = listStructures_Process;
        processMap_["storeStructure"] = storeStructure_Process;
        processMap_["storeStructures"] = storeStructures_Process;
        processMap_["deleteStruct"] = deleteStruct_Process;
        processMap_["listStrings"] = listStrings_Process;
        processMap_["xrefsTo"] = xrefsTo_Process;
        processMap_["xrefsFrom"] = xrefsFrom_Process;
        processMap_["fetchInstruction"] = fetchInstruction_Process;
        processMap_["listFunctions"] = listFunctions_Process;
        processMap_["getFunctionFrame"] = getFunctionFrame_Process;
        processMap_["parseTypeDeclaration"] = parseTypeDeclaration_Process;
        processMap_["formatTypeInfo"] = formatTypeInfo_Process;
        processMap_["listNamedAddresses"] = listNamedAddresses_Process;
        processMap_["waitBackgroundTasks"] = waitBackgroundTasks_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void listEnums_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listEnums_args args = new listEnums_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listEnums_result result = new listEnums_result();
        result.Success = iface_.listEnums();
        oprot.WriteMessageBegin(new TMessage("listEnums", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void storeEnum_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        storeEnum_args args = new storeEnum_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        storeEnum_result result = new storeEnum_result();
        result.Success = iface_.storeEnum(args._enum);
        oprot.WriteMessageBegin(new TMessage("storeEnum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void storeEnums_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        storeEnums_args args = new storeEnums_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        storeEnums_result result = new storeEnums_result();
        result.Success = iface_.storeEnums(args.Enums);
        oprot.WriteMessageBegin(new TMessage("storeEnums", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteEnum_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteEnum_args args = new deleteEnum_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteEnum_result result = new deleteEnum_result();
        iface_.deleteEnum(args.Name);
        oprot.WriteMessageBegin(new TMessage("deleteEnum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listStructures_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listStructures_args args = new listStructures_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listStructures_result result = new listStructures_result();
        result.Success = iface_.listStructures();
        oprot.WriteMessageBegin(new TMessage("listStructures", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void storeStructure_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        storeStructure_args args = new storeStructure_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        storeStructure_result result = new storeStructure_result();
        result.Success = iface_.storeStructure(args._struct);
        oprot.WriteMessageBegin(new TMessage("storeStructure", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void storeStructures_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        storeStructures_args args = new storeStructures_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        storeStructures_result result = new storeStructures_result();
        result.Success = iface_.storeStructures(args.Structs);
        oprot.WriteMessageBegin(new TMessage("storeStructures", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteStruct_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteStruct_args args = new deleteStruct_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteStruct_result result = new deleteStruct_result();
        iface_.deleteStruct(args.Name);
        oprot.WriteMessageBegin(new TMessage("deleteStruct", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listStrings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listStrings_args args = new listStrings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listStrings_result result = new listStrings_result();
        result.Success = iface_.listStrings();
        oprot.WriteMessageBegin(new TMessage("listStrings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void xrefsTo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        xrefsTo_args args = new xrefsTo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        xrefsTo_result result = new xrefsTo_result();
        result.Success = iface_.xrefsTo(args.Address, args.RefType);
        oprot.WriteMessageBegin(new TMessage("xrefsTo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void xrefsFrom_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        xrefsFrom_args args = new xrefsFrom_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        xrefsFrom_result result = new xrefsFrom_result();
        result.Success = iface_.xrefsFrom(args.Address, args.RefType);
        oprot.WriteMessageBegin(new TMessage("xrefsFrom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void fetchInstruction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        fetchInstruction_args args = new fetchInstruction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        fetchInstruction_result result = new fetchInstruction_result();
        result.Success = iface_.fetchInstruction(args.Address);
        oprot.WriteMessageBegin(new TMessage("fetchInstruction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listFunctions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listFunctions_args args = new listFunctions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listFunctions_result result = new listFunctions_result();
        result.Success = iface_.listFunctions();
        oprot.WriteMessageBegin(new TMessage("listFunctions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFunctionFrame_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFunctionFrame_args args = new getFunctionFrame_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFunctionFrame_result result = new getFunctionFrame_result();
        result.Success = iface_.getFunctionFrame(args.Address);
        oprot.WriteMessageBegin(new TMessage("getFunctionFrame", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void parseTypeDeclaration_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        parseTypeDeclaration_args args = new parseTypeDeclaration_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        parseTypeDeclaration_result result = new parseTypeDeclaration_result();
        result.Success = iface_.parseTypeDeclaration(args.TypeDeclaration);
        oprot.WriteMessageBegin(new TMessage("parseTypeDeclaration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void formatTypeInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        formatTypeInfo_args args = new formatTypeInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        formatTypeInfo_result result = new formatTypeInfo_result();
        result.Success = iface_.formatTypeInfo(args.TypeInfo);
        oprot.WriteMessageBegin(new TMessage("formatTypeInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listNamedAddresses_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listNamedAddresses_args args = new listNamedAddresses_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listNamedAddresses_result result = new listNamedAddresses_result();
        result.Success = iface_.listNamedAddresses();
        oprot.WriteMessageBegin(new TMessage("listNamedAddresses", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void waitBackgroundTasks_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        waitBackgroundTasks_args args = new waitBackgroundTasks_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        waitBackgroundTasks_result result = new waitBackgroundTasks_result();
        iface_.waitBackgroundTasks();
        oprot.WriteMessageBegin(new TMessage("waitBackgroundTasks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listEnums_args : TBase
    {

      public listEnums_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listEnums_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listEnums_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listEnums_result : TBase
    {
      private List<ida_enum> _success;

      public List<ida_enum> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listEnums_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ida_enum>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    ida_enum _elem26 = new ida_enum();
                    _elem26 = new ida_enum();
                    _elem26.Read(iprot);
                    Success.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listEnums_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ida_enum _iter27 in Success)
              {
                _iter27.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listEnums_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeEnum_args : TBase
    {
      private ida_enum __enum;

      public ida_enum _enum
      {
        get
        {
          return __enum;
        }
        set
        {
          __isset._enum = true;
          this.__enum = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _enum;
      }

      public storeEnum_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _enum = new ida_enum();
                _enum.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeEnum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_enum != null && __isset._enum) {
          field.Name = "_enum";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _enum.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeEnum_args(");
        sb.Append("_enum: ");
        sb.Append(_enum== null ? "<null>" : _enum.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeEnum_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public storeEnum_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeEnum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeEnum_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeEnums_args : TBase
    {
      private List<ida_enum> _enums;

      public List<ida_enum> Enums
      {
        get
        {
          return _enums;
        }
        set
        {
          __isset.enums = true;
          this._enums = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool enums;
      }

      public storeEnums_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Enums = new List<ida_enum>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    ida_enum _elem30 = new ida_enum();
                    _elem30 = new ida_enum();
                    _elem30.Read(iprot);
                    Enums.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeEnums_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Enums != null && __isset.enums) {
          field.Name = "enums";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Enums.Count));
            foreach (ida_enum _iter31 in Enums)
            {
              _iter31.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeEnums_args(");
        sb.Append("Enums: ");
        sb.Append(Enums);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeEnums_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public storeEnums_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeEnums_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeEnums_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteEnum_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public deleteEnum_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteEnum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteEnum_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteEnum_result : TBase
    {

      public deleteEnum_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteEnum_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteEnum_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listStructures_args : TBase
    {

      public listStructures_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listStructures_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listStructures_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listStructures_result : TBase
    {
      private List<IdaStruct> _success;

      public List<IdaStruct> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listStructures_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<IdaStruct>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    IdaStruct _elem34 = new IdaStruct();
                    _elem34 = new IdaStruct();
                    _elem34.Read(iprot);
                    Success.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listStructures_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (IdaStruct _iter35 in Success)
              {
                _iter35.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listStructures_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeStructure_args : TBase
    {
      private IdaStruct __struct;

      public IdaStruct _struct
      {
        get
        {
          return __struct;
        }
        set
        {
          __isset._struct = true;
          this.__struct = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool _struct;
      }

      public storeStructure_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                _struct = new IdaStruct();
                _struct.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeStructure_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (_struct != null && __isset._struct) {
          field.Name = "_struct";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          _struct.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeStructure_args(");
        sb.Append("_struct: ");
        sb.Append(_struct== null ? "<null>" : _struct.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeStructure_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public storeStructure_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeStructure_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeStructure_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeStructures_args : TBase
    {
      private List<IdaStruct> _structs;

      public List<IdaStruct> Structs
      {
        get
        {
          return _structs;
        }
        set
        {
          __isset.structs = true;
          this._structs = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool structs;
      }

      public storeStructures_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Structs = new List<IdaStruct>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    IdaStruct _elem38 = new IdaStruct();
                    _elem38 = new IdaStruct();
                    _elem38.Read(iprot);
                    Structs.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeStructures_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Structs != null && __isset.structs) {
          field.Name = "structs";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Structs.Count));
            foreach (IdaStruct _iter39 in Structs)
            {
              _iter39.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeStructures_args(");
        sb.Append("Structs: ");
        sb.Append(Structs);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeStructures_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public storeStructures_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeStructures_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeStructures_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteStruct_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public deleteStruct_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteStruct_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteStruct_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteStruct_result : TBase
    {

      public deleteStruct_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteStruct_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteStruct_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listStrings_args : TBase
    {

      public listStrings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listStrings_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listStrings_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listStrings_result : TBase
    {
      private List<ida_string> _success;

      public List<ida_string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listStrings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ida_string>();
                  TList _list40 = iprot.ReadListBegin();
                  for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    ida_string _elem42 = new ida_string();
                    _elem42 = new ida_string();
                    _elem42.Read(iprot);
                    Success.Add(_elem42);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listStrings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ida_string _iter43 in Success)
              {
                _iter43.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listStrings_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class xrefsTo_args : TBase
    {
      private int _address;
      private IdaRefType _refType;

      public int Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="IdaRefType"/>
      /// </summary>
      public IdaRefType RefType
      {
        get
        {
          return _refType;
        }
        set
        {
          __isset.refType = true;
          this._refType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
        public bool refType;
      }

      public xrefsTo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Address = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                RefType = (IdaRefType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("xrefsTo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.address) {
          field.Name = "address";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Address);
          oprot.WriteFieldEnd();
        }
        if (__isset.refType) {
          field.Name = "refType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)RefType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("xrefsTo_args(");
        sb.Append("Address: ");
        sb.Append(Address);
        sb.Append(",RefType: ");
        sb.Append(RefType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class xrefsTo_result : TBase
    {
      private List<IdaRef> _success;

      public List<IdaRef> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public xrefsTo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<IdaRef>();
                  TList _list44 = iprot.ReadListBegin();
                  for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    IdaRef _elem46 = new IdaRef();
                    _elem46 = new IdaRef();
                    _elem46.Read(iprot);
                    Success.Add(_elem46);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("xrefsTo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (IdaRef _iter47 in Success)
              {
                _iter47.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("xrefsTo_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class xrefsFrom_args : TBase
    {
      private int _address;
      private IdaRefType _refType;

      public int Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="IdaRefType"/>
      /// </summary>
      public IdaRefType RefType
      {
        get
        {
          return _refType;
        }
        set
        {
          __isset.refType = true;
          this._refType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
        public bool refType;
      }

      public xrefsFrom_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Address = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                RefType = (IdaRefType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("xrefsFrom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.address) {
          field.Name = "address";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Address);
          oprot.WriteFieldEnd();
        }
        if (__isset.refType) {
          field.Name = "refType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)RefType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("xrefsFrom_args(");
        sb.Append("Address: ");
        sb.Append(Address);
        sb.Append(",RefType: ");
        sb.Append(RefType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class xrefsFrom_result : TBase
    {
      private List<IdaRef> _success;

      public List<IdaRef> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public xrefsFrom_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<IdaRef>();
                  TList _list48 = iprot.ReadListBegin();
                  for( int _i49 = 0; _i49 < _list48.Count; ++_i49)
                  {
                    IdaRef _elem50 = new IdaRef();
                    _elem50 = new IdaRef();
                    _elem50.Read(iprot);
                    Success.Add(_elem50);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("xrefsFrom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (IdaRef _iter51 in Success)
              {
                _iter51.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("xrefsFrom_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchInstruction_args : TBase
    {
      private int _address;

      public int Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public fetchInstruction_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Address = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchInstruction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.address) {
          field.Name = "address";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Address);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchInstruction_args(");
        sb.Append("Address: ");
        sb.Append(Address);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchInstruction_result : TBase
    {
      private IdaInstruction _success;

      public IdaInstruction Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public fetchInstruction_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new IdaInstruction();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchInstruction_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchInstruction_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listFunctions_args : TBase
    {

      public listFunctions_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listFunctions_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listFunctions_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listFunctions_result : TBase
    {
      private List<IdaFunction> _success;

      public List<IdaFunction> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listFunctions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<IdaFunction>();
                  TList _list52 = iprot.ReadListBegin();
                  for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                  {
                    IdaFunction _elem54 = new IdaFunction();
                    _elem54 = new IdaFunction();
                    _elem54.Read(iprot);
                    Success.Add(_elem54);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listFunctions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (IdaFunction _iter55 in Success)
              {
                _iter55.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listFunctions_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFunctionFrame_args : TBase
    {
      private int _address;

      public int Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public getFunctionFrame_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Address = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFunctionFrame_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.address) {
          field.Name = "address";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Address);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFunctionFrame_args(");
        sb.Append("Address: ");
        sb.Append(Address);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFunctionFrame_result : TBase
    {
      private IdaFunctionFrame _success;

      public IdaFunctionFrame Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getFunctionFrame_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new IdaFunctionFrame();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFunctionFrame_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFunctionFrame_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class parseTypeDeclaration_args : TBase
    {
      private string _typeDeclaration;

      public string TypeDeclaration
      {
        get
        {
          return _typeDeclaration;
        }
        set
        {
          __isset.typeDeclaration = true;
          this._typeDeclaration = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool typeDeclaration;
      }

      public parseTypeDeclaration_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.String) {
                TypeDeclaration = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("parseTypeDeclaration_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TypeDeclaration != null && __isset.typeDeclaration) {
          field.Name = "typeDeclaration";
          field.Type = TType.String;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TypeDeclaration);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("parseTypeDeclaration_args(");
        sb.Append("TypeDeclaration: ");
        sb.Append(TypeDeclaration);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class parseTypeDeclaration_result : TBase
    {
      private IdaTypeInfo _success;

      public IdaTypeInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public parseTypeDeclaration_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new IdaTypeInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("parseTypeDeclaration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("parseTypeDeclaration_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class formatTypeInfo_args : TBase
    {
      private IdaTypeInfo _typeInfo;

      public IdaTypeInfo TypeInfo
      {
        get
        {
          return _typeInfo;
        }
        set
        {
          __isset.typeInfo = true;
          this._typeInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool typeInfo;
      }

      public formatTypeInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.Struct) {
                TypeInfo = new IdaTypeInfo();
                TypeInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("formatTypeInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TypeInfo != null && __isset.typeInfo) {
          field.Name = "typeInfo";
          field.Type = TType.Struct;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          TypeInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("formatTypeInfo_args(");
        sb.Append("TypeInfo: ");
        sb.Append(TypeInfo== null ? "<null>" : TypeInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class formatTypeInfo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public formatTypeInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("formatTypeInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("formatTypeInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listNamedAddresses_args : TBase
    {

      public listNamedAddresses_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listNamedAddresses_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listNamedAddresses_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listNamedAddresses_result : TBase
    {
      private List<IdaNamedAddress> _success;

      public List<IdaNamedAddress> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listNamedAddresses_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<IdaNamedAddress>();
                  TList _list56 = iprot.ReadListBegin();
                  for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                  {
                    IdaNamedAddress _elem58 = new IdaNamedAddress();
                    _elem58 = new IdaNamedAddress();
                    _elem58.Read(iprot);
                    Success.Add(_elem58);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listNamedAddresses_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (IdaNamedAddress _iter59 in Success)
              {
                _iter59.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listNamedAddresses_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class waitBackgroundTasks_args : TBase
    {

      public waitBackgroundTasks_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("waitBackgroundTasks_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("waitBackgroundTasks_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class waitBackgroundTasks_result : TBase
    {

      public waitBackgroundTasks_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("waitBackgroundTasks_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("waitBackgroundTasks_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
